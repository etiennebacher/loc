use extendr_api::prelude::*;
use tokei::{Config, LanguageType, Languages};

#[extendr]
fn internal_count_loc(
    paths: Strings,
    excluded: Strings,
    include_hidden: bool,
    languages: Strings,
) -> List {
    let config = Config {
        hidden: Some(include_hidden),
        ..Default::default()
    };
    let paths = paths.iter().map(|si| si.as_str()).collect::<Vec<_>>();
    let excluded = excluded.iter().map(|si| si.as_str()).collect::<Vec<_>>();

    let requested_languages = languages
        .into_iter()
        .map(|xi| {
            let lang = string_to_language(xi.as_str());
            rprintln!("foo");
            match lang {
                Ok(x) => x,
                Err(_) => panic!("foo"),
            }
        })
        .collect::<Vec<LanguageType>>();

    let mut languages = Languages::new();
    languages.get_statistics(paths.as_slice(), excluded.as_slice(), &config);

    let out = requested_languages
        .iter()
        .map(|xi| {
            if languages.contains_key(xi) {
                let res = &languages[xi];
                list!(
                    blanks = r!(res.blanks as i32),
                    comments = r!(res.comments as i32),
                    code = r!(res.code as i32),
                    inaccurate = r!(res.inaccurate),
                )
            } else {
                list!(
                    blanks = 0,
                    comments = 0,
                    code = 0,
                    inaccurate = Rbool::na_value(),
                )
            }
        })
        .collect::<List>();

    out
}

fn string_to_language(string: &str) -> std::result::Result<LanguageType, String> {
    match string {
        "Abap" => Ok(LanguageType::Abap),
        "ActionScript" => Ok(LanguageType::ActionScript),
        "Ada" => Ok(LanguageType::Ada),
        "Agda" => Ok(LanguageType::Agda),
        "Alex" => Ok(LanguageType::Alex),
        "Alloy" => Ok(LanguageType::Alloy),
        "Asn1" => Ok(LanguageType::Asn1),
        "Asp" => Ok(LanguageType::Asp),
        "AspNet" => Ok(LanguageType::AspNet),
        "Assembly" => Ok(LanguageType::Assembly),
        "AssemblyGAS" => Ok(LanguageType::AssemblyGAS),
        // "ATS" => Ok(LanguageType::ATS),
        "Autoconf" => Ok(LanguageType::Autoconf),
        "AutoHotKey" => Ok(LanguageType::AutoHotKey),
        "Automake" => Ok(LanguageType::Automake),
        // "AWK" => Ok(LanguageType::AWK),
        "Bash" => Ok(LanguageType::Bash),
        "Batch" => Ok(LanguageType::Batch),
        // "Bazel" => Ok(LanguageType::Bazel),
        "Bean" => Ok(LanguageType::Bean),
        // "Bitbake" => Ok(LanguageType::Bitbake),
        "BrightScript" => Ok(LanguageType::BrightScript),
        "C" => Ok(LanguageType::C),
        "Cabal" => Ok(LanguageType::Cabal),
        "Cassius" => Ok(LanguageType::Cassius),
        "Ceylon" => Ok(LanguageType::Ceylon),
        "CHeader" => Ok(LanguageType::CHeader),
        "Clojure" => Ok(LanguageType::Clojure),
        "ClojureC" => Ok(LanguageType::ClojureC),
        "ClojureScript" => Ok(LanguageType::ClojureScript),
        "CMake" => Ok(LanguageType::CMake),
        "Cobol" => Ok(LanguageType::Cobol),
        "CoffeeScript" => Ok(LanguageType::CoffeeScript),
        "Cogent" => Ok(LanguageType::Cogent),
        "ColdFusion" => Ok(LanguageType::ColdFusion),
        "ColdFusionScript" => Ok(LanguageType::ColdFusionScript),
        "Coq" => Ok(LanguageType::Coq),
        "Cpp" => Ok(LanguageType::Cpp),
        "CppHeader" => Ok(LanguageType::CppHeader),
        "Crystal" => Ok(LanguageType::Crystal),
        "CSharp" => Ok(LanguageType::CSharp),
        "CShell" => Ok(LanguageType::CShell),
        "Css" => Ok(LanguageType::Css),
        // "Cuda" => Ok(LanguageType::Cuda),
        // "Cython" => Ok(LanguageType::Cython),
        "D" => Ok(LanguageType::D),
        // "DAML" => Ok(LanguageType::DAML),
        "Dart" => Ok(LanguageType::Dart),
        "DeviceTree" => Ok(LanguageType::DeviceTree),
        "Dhall" => Ok(LanguageType::Dhall),
        "Dockerfile" => Ok(LanguageType::Dockerfile),
        "DotNetResource" => Ok(LanguageType::DotNetResource),
        "DreamMaker" => Ok(LanguageType::DreamMaker),
        "Dust" => Ok(LanguageType::Dust),
        // "Ebuild" => Ok(LanguageType::Ebuild),
        // "EdgeDB" => Ok(LanguageType::EdgeDB),
        "Edn" => Ok(LanguageType::Edn),
        "Elisp" => Ok(LanguageType::Elisp),
        "Elixir" => Ok(LanguageType::Elixir),
        "Elm" => Ok(LanguageType::Elm),
        "Elvish" => Ok(LanguageType::Elvish),
        "EmacsDevEnv" => Ok(LanguageType::EmacsDevEnv),
        "Emojicode" => Ok(LanguageType::Emojicode),
        "Erlang" => Ok(LanguageType::Erlang),
        // "Factor" => Ok(LanguageType::Factor),
        "FEN" => Ok(LanguageType::FEN),
        "Fish" => Ok(LanguageType::Fish),
        "FlatBuffers" => Ok(LanguageType::FlatBuffers),
        // "ForgeConfig" => Ok(LanguageType::ForgeConfig),
        "Forth" => Ok(LanguageType::Forth),
        "FortranLegacy" => Ok(LanguageType::FortranLegacy),
        "FortranModern" => Ok(LanguageType::FortranModern),
        "FreeMarker" => Ok(LanguageType::FreeMarker),
        "FSharp" => Ok(LanguageType::FSharp),
        "Fstar" => Ok(LanguageType::Fstar),
        "GDB" => Ok(LanguageType::GDB),
        "GdScript" => Ok(LanguageType::GdScript),
        "Gherkin" => Ok(LanguageType::Gherkin),
        "Gleam" => Ok(LanguageType::Gleam),
        "Glsl" => Ok(LanguageType::Glsl),
        "Go" => Ok(LanguageType::Go),
        "Graphql" => Ok(LanguageType::Graphql),
        "Groovy" => Ok(LanguageType::Groovy),
        "Gwion" => Ok(LanguageType::Gwion),
        "Hamlet" => Ok(LanguageType::Hamlet),
        "Handlebars" => Ok(LanguageType::Handlebars),
        "Happy" => Ok(LanguageType::Happy),
        // "Hare" => Ok(LanguageType::Hare),
        "Haskell" => Ok(LanguageType::Haskell),
        "Haxe" => Ok(LanguageType::Haxe),
        "Hcl" => Ok(LanguageType::Hcl),
        "Hex" => Ok(LanguageType::Hex),
        "Hlsl" => Ok(LanguageType::Hlsl),
        "HolyC" => Ok(LanguageType::HolyC),
        "Html" => Ok(LanguageType::Html),
        // "Hy" => Ok(LanguageType::Hy),
        "Idris" => Ok(LanguageType::Idris),
        "Ini" => Ok(LanguageType::Ini),
        "IntelHex" => Ok(LanguageType::IntelHex),
        "Isabelle" => Ok(LanguageType::Isabelle),
        "Jai" => Ok(LanguageType::Jai),
        // "Janet" => Ok(LanguageType::Janet),
        "Java" => Ok(LanguageType::Java),
        "JavaScript" => Ok(LanguageType::JavaScript),
        // "Jq" => Ok(LanguageType::Jq),
        "Json" => Ok(LanguageType::Json),
        "Jsx" => Ok(LanguageType::Jsx),
        "Julia" => Ok(LanguageType::Julia),
        "Julius" => Ok(LanguageType::Julius),
        "KakouneScript" => Ok(LanguageType::KakouneScript),
        "Kotlin" => Ok(LanguageType::Kotlin),
        "Lean" => Ok(LanguageType::Lean),
        "Less" => Ok(LanguageType::Less),
        // "LinkerScript" => Ok(LanguageType::LinkerScript),
        "Liquid" => Ok(LanguageType::Liquid),
        "Lisp" => Ok(LanguageType::Lisp),
        "LLVM" => Ok(LanguageType::LLVM),
        "Logtalk" => Ok(LanguageType::Logtalk),
        "Lua" => Ok(LanguageType::Lua),
        "Lucius" => Ok(LanguageType::Lucius),
        "Madlang" => Ok(LanguageType::Madlang),
        // "Max" => Ok(LanguageType::Max),
        "Makefile" => Ok(LanguageType::Makefile),
        "Markdown" => Ok(LanguageType::Markdown),
        "Meson" => Ok(LanguageType::Meson),
        "Mint" => Ok(LanguageType::Mint),
        // "Mlatu" => Ok(LanguageType::Mlatu),
        "ModuleDef" => Ok(LanguageType::ModuleDef),
        "MoonScript" => Ok(LanguageType::MoonScript),
        "MsBuild" => Ok(LanguageType::MsBuild),
        "Mustache" => Ok(LanguageType::Mustache),
        "Nim" => Ok(LanguageType::Nim),
        "Nix" => Ok(LanguageType::Nix),
        "NotQuitePerl" => Ok(LanguageType::NotQuitePerl),
        // "NuGetConfig" => Ok(LanguageType::NuGetConfig),
        // "Nushell" => Ok(LanguageType::Nushell),
        "ObjectiveC" => Ok(LanguageType::ObjectiveC),
        "ObjectiveCpp" => Ok(LanguageType::ObjectiveCpp),
        "OCaml" => Ok(LanguageType::OCaml),
        "Odin" => Ok(LanguageType::Odin),
        // "OpenSCAD" => Ok(LanguageType::OpenSCAD),
        // "OpenQASM" => Ok(LanguageType::OpenQASM),
        "Org" => Ok(LanguageType::Org),
        "Oz" => Ok(LanguageType::Oz),
        "Pascal" => Ok(LanguageType::Pascal),
        "Perl" => Ok(LanguageType::Perl),
        "Perl6" => Ok(LanguageType::Perl6),
        "Pest" => Ok(LanguageType::Pest),
        "Php" => Ok(LanguageType::Php),
        // "Poke" => Ok(LanguageType::Poke),
        "Polly" => Ok(LanguageType::Polly),
        "Pony" => Ok(LanguageType::Pony),
        "PostCss" => Ok(LanguageType::PostCss),
        "PowerShell" => Ok(LanguageType::PowerShell),
        "Processing" => Ok(LanguageType::Processing),
        "Prolog" => Ok(LanguageType::Prolog),
        "Protobuf" => Ok(LanguageType::Protobuf),
        "PSL" => Ok(LanguageType::PSL),
        "PureScript" => Ok(LanguageType::PureScript),
        "Python" => Ok(LanguageType::Python),
        "Qcl" => Ok(LanguageType::Qcl),
        "Qml" => Ok(LanguageType::Qml),
        "R" => Ok(LanguageType::R),
        "Racket" => Ok(LanguageType::Racket),
        "Rakefile" => Ok(LanguageType::Rakefile),
        "Razor" => Ok(LanguageType::Razor),
        "Renpy" => Ok(LanguageType::Renpy),
        "ReStructuredText" => Ok(LanguageType::ReStructuredText),
        "RON" => Ok(LanguageType::RON),
        "RPMSpecfile" => Ok(LanguageType::RPMSpecfile),
        "Ruby" => Ok(LanguageType::Ruby),
        "RubyHtml" => Ok(LanguageType::RubyHtml),
        "Rust" => Ok(LanguageType::Rust),
        "Sass" => Ok(LanguageType::Sass),
        "Scala" => Ok(LanguageType::Scala),
        "Scheme" => Ok(LanguageType::Scheme),
        "Scons" => Ok(LanguageType::Scons),
        "Sh" => Ok(LanguageType::Sh),
        // "ShaderLab" => Ok(LanguageType::ShaderLab),
        // "Slang" => Ok(LanguageType::Slang),
        "Sml" => Ok(LanguageType::Sml),
        "Solidity" => Ok(LanguageType::Solidity),
        "SpecmanE" => Ok(LanguageType::SpecmanE),
        "Spice" => Ok(LanguageType::Spice),
        "Sql" => Ok(LanguageType::Sql),
        "SRecode" => Ok(LanguageType::SRecode),
        "Stratego" => Ok(LanguageType::Stratego),
        "Svelte" => Ok(LanguageType::Svelte),
        "Svg" => Ok(LanguageType::Svg),
        "Swift" => Ok(LanguageType::Swift),
        "Swig" => Ok(LanguageType::Swig),
        "SystemVerilog" => Ok(LanguageType::SystemVerilog),
        "Tcl" => Ok(LanguageType::Tcl),
        "Tex" => Ok(LanguageType::Tex),
        "Text" => Ok(LanguageType::Text),
        "Thrift" => Ok(LanguageType::Thrift),
        "Toml" => Ok(LanguageType::Toml),
        "Tsx" => Ok(LanguageType::Tsx),
        "Twig" => Ok(LanguageType::Twig),
        "TypeScript" => Ok(LanguageType::TypeScript),
        // "UMPL" => Ok(LanguageType::UMPL),
        "UnrealDeveloperMarkdown" => Ok(LanguageType::UnrealDeveloperMarkdown),
        "UnrealPlugin" => Ok(LanguageType::UnrealPlugin),
        "UnrealProject" => Ok(LanguageType::UnrealProject),
        "UnrealScript" => Ok(LanguageType::UnrealScript),
        "UnrealShader" => Ok(LanguageType::UnrealShader),
        "UnrealShaderHeader" => Ok(LanguageType::UnrealShaderHeader),
        "UrWeb" => Ok(LanguageType::UrWeb),
        "UrWebProject" => Ok(LanguageType::UrWebProject),
        "Vala" => Ok(LanguageType::Vala),
        "VB6" => Ok(LanguageType::VB6),
        "VBScript" => Ok(LanguageType::VBScript),
        "Velocity" => Ok(LanguageType::Velocity),
        "Verilog" => Ok(LanguageType::Verilog),
        "VerilogArgsFile" => Ok(LanguageType::VerilogArgsFile),
        "Vhdl" => Ok(LanguageType::Vhdl),
        "VimScript" => Ok(LanguageType::VimScript),
        "VisualBasic" => Ok(LanguageType::VisualBasic),
        "VisualStudioProject" => Ok(LanguageType::VisualStudioProject),
        "VisualStudioSolution" => Ok(LanguageType::VisualStudioSolution),
        "Vue" => Ok(LanguageType::Vue),
        "WebAssembly" => Ok(LanguageType::WebAssembly),
        "Wolfram" => Ok(LanguageType::Wolfram),
        "Xaml" => Ok(LanguageType::Xaml),
        "XcodeConfig" => Ok(LanguageType::XcodeConfig),
        "Xml" => Ok(LanguageType::Xml),
        "XSL" => Ok(LanguageType::XSL),
        "Xtend" => Ok(LanguageType::Xtend),
        "Yaml" => Ok(LanguageType::Yaml),
        // "ZenCode" => Ok(LanguageType::ZenCode),
        "Zig" => Ok(LanguageType::Zig),
        // "ZoKrates" => Ok(LanguageType::ZoKrates),
        "Zsh" => Ok(LanguageType::Zsh.into()),
        x => Err(format!("Unknown language is ignored: {}", x).to_string()),
    }
}

extendr_module! {
    mod loc;
    fn internal_count_loc;
}
